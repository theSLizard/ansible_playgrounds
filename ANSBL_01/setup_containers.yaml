---
- name: Ensure necessary Python packages are installed
  hosts: localhost
  tasks:
    - name: Ensure requests module is installed
      pip:
        name: requests
        state: present
        executable: pip3

- name: Ensure Docker is installed and running, set up Docker containers
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Check if Docker is installed
      command: which docker
      register: docker_installed
      ignore_errors: yes

    - name: Install Docker using Homebrew
      homebrew_cask:
        name: docker
      when: docker_installed.rc != 0

    - name: Start Docker Desktop (macOS specific)
      command: open /Applications/Docker.app
      become: yes
      when: docker_installed.rc != 0

    - name: Wait for Docker to start
      wait_for:
        port: 2375
        host: localhost
        delay: 30
      when: docker_installed.rc != 0

    - name: Ensure Docker is running
      command: docker ps
      register: docker_running
      retries: 5
      delay: 10
      until: docker_running.rc == 0

    - name: Create Docker network
      docker_network:
        name: ansible_network
        driver: bridge

    - name: Build Docker image from Dockerfile
      community.docker.docker_image:
        build:
          path: .
        name: alpine-ssh
        tag: latest    
        source: build

    - name: Create Docker container 1
      docker_container:
        name: container1
        image: alpine-ssh:latest
        state: started
        published_ports:
          - "2222:22"
          - "7682:7681"
        networks:
          - name: ansible_network
        command: sleep infinity

    - name: Create user 'user' inside container1
      command: docker exec container1 adduser -D -u 1000 user   
      ignore_errors: true  

    - name: Create Docker container 2
      docker_container:
        name: container2
        image: alpine-ssh:latest
        state: started
        published_ports:
          - "2223:22"
          - "7683:7681"
        networks:
          - name: ansible_network
        command: sleep infinity

    - name: Create user 'user' inside container2
      command: docker exec container2 adduser -D -u 1000 user   
      ignore_errors: true     

    - name: Retrieve IP address of container1 
      shell: docker inspect -f '{{"{{"}}range .NetworkSettings.Networks{{"}}"}}{{"{{"}}.IPAddress{{"}}"}}{{"{{"}}end{{"}}"}}' container1
      register: container1_ip

    - name: Retrieve IP address of container2 
      shell: docker inspect -f '{{"{{"}}range .NetworkSettings.Networks{{"}}"}}{{"{{"}}.IPAddress{{"}}"}}{{"{{"}}end{{"}}"}}' container2
      register: container2_ip

    - name: Create dynamic inventory
      copy:
        dest: ./inventory/docker_hosts
        content: |
          [docker_containers]
          container1 ansible_host={{ container1_ip.stdout }} ansible_port=2222 ansible_user=user ansible_ssh_private_key_file=~/.ssh/id_rsa
          container2 ansible_host={{ container2_ip.stdout }} ansible_port=2223 ansible_user=user ansible_ssh_private_key_file=~/.ssh/id_rsa

    - name: Display dynamic inventory file content
      command: cat ./inventory/docker_hosts
      register: inventory_content

    - name: Show inventory content
      debug:
        msg: "{{ inventory_content.stdout }}"

    - name: Display IP address of container1
      debug:
        msg: "Container1 IP: {{ container1_ip.stdout }}"

    - name: Display IP address of container2
      debug:
        msg: "Container2 IP: {{ container2_ip.stdout }}"

    - name: Ensure containers are running
      docker_container:
        name: "{{ item }}"
        state: started
      with_items:
        - container1
        - container2

    - name: Wait for SSH to be available on container1
      wait_for:
        port: 2222
        host: localhost
        timeout: 30

    - name: Wait for SSH to be available on container2
      wait_for:
        port: 2223
        host: localhost
        timeout: 30

    - name: Copy SSH public key to container1
      community.docker.docker_container_exec:
        container: container1
        command: >
          sh -c 'mkdir -p /root/.ssh && echo -e "{{ lookup('file', '~/.ssh/id_rsa.pub') }}" >> /root/.ssh/authorized_keys'

    - name: Copy SSH public key to container2
      community.docker.docker_container_exec:
        container: container2
        command: >
          sh -c 'mkdir -p /root/.ssh && echo -e "{{ lookup('file', '~/.ssh/id_rsa.pub') }}" >> /root/.ssh/authorized_keys'



- name: Ping Docker containers
  hosts: docker_containers
  gather_facts: false
  tasks:

    - name: Check uptime of container1
      command: uptime
      register: uptime_output

    - debug:
        var: uptime_output.stdout


    - name: Ping the container
      ping:          






